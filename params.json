{"name":"Resumable Lambdas","tagline":"An implementation of N4244 Resumable Lambdas","body":"### Resumable lambdas implemented as a C++-to-C++ preprocessor\r\nThis project is an implementation of the C++ standards proposal [N4244 Resumable Lambdas](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4244.pdf). It is implemented using LibClang and generates code suitable for compilation by recent clang and g++ compilers with `-std=c++1y` mode. Please note that there are some differences from N4244, mainly due to having to work inside the existing C++ grammar. These differences are described below.\r\n\r\n### Please be gentle and don't be surprised if you have issues\r\nThe preprocessor is easily confused. Avoid exotic code, for small values of exotic. For example, automatic deduction of local variable types, temporaries within an expression, nesting lambdas within lambdas, etc., are not likely to work.\r\n\r\n### Try it out online\r\nYou can try the preprocessor online at [http://think-async.com/resumable-pp/](http://think-async.com/resumable-pp/). This page will generate C++ code that you can copy and paste into your own source file.\r\n\r\n### Building from source\r\nClone or download the repository and use the included makefile. It has been tested with the clang-3.5-dev package on Debian Linux, and with Clang 3.5 built from source on Mac OS.\r\n\r\n### Examples\r\nThe repository includes some simple examples and tests. You can view them online [here](https://github.com/chriskohlhoff/resumable-pp/tree/master/test).\r\n\r\n### Differences from N4244\r\n\r\n#### `resumable` keyword\r\nIn N4244, resumable lambdas are identified by the `resumable` keyword:\r\n```\r\n[]() resumable\r\n{\r\n  yield 42;\r\n  // ...\r\n}\r\n```\r\nIn this implementation this keyword is optional:\r\n```\r\n[]\r\n{\r\n  yield 42;\r\n  // ...\r\n}\r\n```\r\nThe preprocessor will automatically search for `yield`, `yield from` and `return from` statements within a lambda. Note that you should still use the `resumable` keyword if you want to modify a captured variable (it also marks the lambda as being `mutable`).\r\n\r\n#### yield\r\nThe use of `yield` as a statement is fully supported. However, the preprocess is unable to deduce the resumable lambda's return type from just `yield`; there must be a `return` as well. If necessary, add a trailing return type:\r\n```\r\n[]() resumable -> int\r\n{\r\n  yield 42;\r\n}\r\n```\r\n\r\n#### yield (type-id)\r\nThis has not been implemented.\r\n\r\n#### yield from\r\n`yield from` may be used to delegate to a sub generator. However, the preprocessor does not yet support the use of `yield from` as an expression, i.e. it cannot do:\r\n```\r\nint i = yield from my_generator();\r\n```\r\n\r\n#### return from\r\n`return from` does not appear in N4244. It behaves like `yield from` except that once the sub generator terminates the outer generator automatically terminates as well.\r\n\r\n#### stop_iteration and falling off the end\r\nThe `stop_iteration` exception has not been implemented. Falling off the end is undefined behaviour, just as it is with a normal function.\r\n\r\n#### []this\r\nThe `[]this` expression is not supported by the C++ grammar. You may use `lambda_this` instead.\r\n\r\n#### Resumable lambda member functions\r\nThe generated code for resumable lambdas will include the member functions as described in N4244, such as `is_terminal()`. However, trying to use them will typically trigger errors in the preprocessor. This is because normal lambdas do not support these function. To work around this, free functions are also provided. So, instead of writing:\r\n```\r\nbool b = g.is_terminal();\r\n```\r\nwrite:\r\n```\r\nbool b = is_terminal(g);\r\n```\r\n\r\n#### wanted\r\nThe `wanted` member function is provided but always returns a `void*`, as local classes cannot have template member functions.\r\n\r\n#### Use of unions to compress the resumable lambda object layout\r\nN4244 describes how unions may be used to overlap the memory associated with different local scopes. This optimisation has not yet been implemented in the preprocessor.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}